directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on FIELD_DEFINITION | OBJECT | INTERFACE
enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type ChargeCode {
  id: ID!
  name: String!
  code: String!
  description: String
  expired: Boolean!
}

scalar DateTime

enum DayMode {
  NORMAL
  HOL_PUBLIC
  HOL_PERSONAL
  HOL_RDO
  HOL_ANNUAL
}

type Message {
  id: ID!
  text: String!
  user: User!
  createdAt: DateTime!
}

type MessageConnection {
  edges: [Message!]!
  pageInfo: PageInfo!
}

type MessageCreated {
  message: Message!
}

type Mutation {
  _: Boolean
  signUp(username: String!, password: String!, email: String!): UserToken!
  signIn(login: String!, password: String!): UserToken!
  deleteUser(id: ID!): Boolean!
  createMessage(text: String!): Message!
  deleteMessage(id: ID!): Boolean!
  updateMessage(id: ID!, text: String!): Boolean!
  createTrackedDay(date: Float!, mode: DayMode): TrackedDay!
  createTrackedTask(
    trackedDayId: ID!
    notes: String
    chargeCodeIds: [ID]
  ): TrackedTask!
  createChargeCode(
    name: String!
    code: String!
    expired: Boolean!
    description: String
  ): ChargeCode!
  createTimeBlock(
    trackedTaskId: ID!
    startTime: Float!
    minutes: Int
  ): TimeBlock!
  updateTrackedDay(id: ID!, date: Float, mode: DayMode): TrackedDay!
  updateTrackedTask(id: ID!, notes: String, chargeCodeIds: [ID]): TrackedTask!
  updateChargeCode(
    id: ID!
    name: String
    code: String
    expired: Boolean
    description: String
  ): ChargeCode!
  updateTimeBlock(id: ID!, minutes: Int!): TimeBlock!
  deleteTrackedDay(id: ID!): ID
  deleteTrackedTask(id: ID!): ID
  deleteTimeBlock(id: ID!): ID
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
}

type Query {
  _: Boolean
  users: [User!]
  user(id: ID!): User
  me: User
  messages(cursor: String, limit: Int): MessageConnection!
  message(id: ID!): Message!
  trackedDays(cursor: String, limit: Int): TrackedDayPaginated!
  trackedDay(trackedDayId: ID!): TrackedDay!
  trackedTasks(
    trackedDayId: ID!
    cursor: String
    limit: Int
  ): TrackedTasksPaginated!
  timeBlocks(trackedTaskId: ID!): [TimeBlock!]!
  chargeCodes: [ChargeCode!]!
  timesheet(trackedDayId: ID!): Timesheet
}

type Subscription {
  _: Boolean
  messageCreated: MessageCreated
  timesheetUpdated: Timesheet
}

type TimeBlock {
  id: ID!
  startTime: Float!
  minutes: Int
}

type TimeCharge {
  id: ID!
  date: Float!
  chargeCode: ChargeCode!
  value: Float!
}

type Timesheet {
  id: ID!
  weekEndingDate: Float!
  timeCharged: [TimeCharge!]!
  user: User!
  trackedDays: [TrackedDay!]!
}

type TrackedDay {
  id: ID!
  date: Float!
  mode: DayMode!
  tasks: [TrackedTask!]
  user: User!
  timeCharges: [TimeCharge!]
}

type TrackedDayPaginated {
  edges: [TrackedDay!]!
  pageInfo: PageInfo!
}

type TrackedTask {
  id: ID!
  notes: String
  chargeCodes: [ChargeCode!]
  timeBlocks: [TimeBlock!]
  createdAt: Float!
}

type TrackedTasksPaginated {
  edges: [TrackedTask!]!
  pageInfo: PageInfo!
}

scalar Upload

type User {
  id: ID!
  username: String!
  email: String!
  role: String
  messages: [Message!]
  trackedDays: [TrackedDay!]
  timesheets: [Timesheet!]
}

type UserToken {
  token: String!
  user: User!
}

